// Code generated by MockGen. DO NOT EDIT.
// Source: converter.go
//
// Generated by this command:
//
//	mockgen -source=converter.go -package=converter_mock -destination=./mock/converter.go
//

// Package converter_mock is a generated GoMock package.
package converter_mock

import (
	reflect "reflect"

	github "github.com/google/go-github/v67/github"
	converter "github.com/rokuosan/github-issue-cms/pkg/converter"
	gomock "go.uber.org/mock/gomock"
)

// MockConverter is a mock of Converter interface.
type MockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockConverterMockRecorder
	isgomock struct{}
}

// MockConverterMockRecorder is the mock recorder for MockConverter.
type MockConverterMockRecorder struct {
	mock *MockConverter
}

// NewMockConverter creates a new mock instance.
func NewMockConverter(ctrl *gomock.Controller) *MockConverter {
	mock := &MockConverter{ctrl: ctrl}
	mock.recorder = &MockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConverter) EXPECT() *MockConverterMockRecorder {
	return m.recorder
}

// GetIssues mocks base method.
func (m *MockConverter) GetIssues() []*github.Issue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssues")
	ret0, _ := ret[0].([]*github.Issue)
	return ret0
}

// GetIssues indicates an expected call of GetIssues.
func (mr *MockConverterMockRecorder) GetIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssues", reflect.TypeOf((*MockConverter)(nil).GetIssues))
}

// IssueToArticle mocks base method.
func (m *MockConverter) IssueToArticle(issue *github.Issue) *converter.Article {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueToArticle", issue)
	ret0, _ := ret[0].(*converter.Article)
	return ret0
}

// IssueToArticle indicates an expected call of IssueToArticle.
func (mr *MockConverterMockRecorder) IssueToArticle(issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueToArticle", reflect.TypeOf((*MockConverter)(nil).IssueToArticle), issue)
}
