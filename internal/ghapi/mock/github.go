// Code generated by MockGen. DO NOT EDIT.
// Source: github.go
//
// Generated by this command:
//
//	mockgen -source=github.go -package=ghapi_mock -destination=./mock/github.go
//

// Package ghapi_mock is a generated GoMock package.
package ghapi_mock

import (
	context "context"
	reflect "reflect"

	ghapi "github.com/rokuosan/github-issue-cms/internal/ghapi"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
	isgomock struct{}
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Issues mocks base method.
func (m *MockAPI) Issues(ctx context.Context, input ghapi.IssuesInput) ([]ghapi.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues", ctx, input)
	ret0, _ := ret[0].([]ghapi.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issues indicates an expected call of Issues.
func (mr *MockAPIMockRecorder) Issues(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockAPI)(nil).Issues), ctx, input)
}
